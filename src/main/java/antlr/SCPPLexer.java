package antlr;// Generated from SCPP.g4 by ANTLR 4.7.1

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SCPPLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, STRING=36, LIBRARY=37, ID=38, 
		INT=39, HEX=40, BIN=41, VARIABLE_MODIFIER=42, VARIABLE_SINGLE_MODIFIER=43, 
		OPERATOR=44, WS=45, COMMENT=46, SINGLE_COMMENT=47, BLOCK_COMMENT=48;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "STRING", "LIBRARY", "ID", "INT", "HEX", "BIN", "VARIABLE_MODIFIER", 
		"VARIABLE_SINGLE_MODIFIER", "OPERATOR", "WS", "COMMENT", "SINGLE_COMMENT", 
		"BLOCK_COMMENT"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "';'", "'public'", "'namespace'", "'uses'", "'('", "')'", "'is'", 
		"'inline'", "'func'", "'if'", "'else'", "'while'", "'for'", "'from'", 
		"'to'", "'by'", "'switch'", "'{'", "'}'", "'case'", "'->'", "'default'", 
		"'var'", "'='", "'return'", "'#'", "'define'", "'include'", "','", "'['", 
		"']'", "'::'", "'?'", "':'", "'!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STRING", "LIBRARY", "ID", "INT", "HEX", "BIN", "VARIABLE_MODIFIER", "VARIABLE_SINGLE_MODIFIER", 
		"OPERATOR", "WS", "COMMENT", "SINGLE_COMMENT", "BLOCK_COMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public SCPPLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "SCPP.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62\u0181\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3"+
		"\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n"+
		"\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3"+
		"\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3"+
		"\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\30\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3"+
		"\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3"+
		"\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%"+
		"\3%\3%\7%\u00f8\n%\f%\16%\u00fb\13%\3%\3%\3&\3&\6&\u0101\n&\r&\16&\u0102"+
		"\3&\7&\u0106\n&\f&\16&\u0109\13&\3&\3&\3\'\6\'\u010e\n\'\r\'\16\'\u010f"+
		"\3\'\7\'\u0113\n\'\f\'\16\'\u0116\13\'\3(\5(\u0119\n(\3(\6(\u011c\n(\r"+
		"(\16(\u011d\3(\3(\6(\u0122\n(\r(\16(\u0123\5(\u0126\n(\3(\3(\6(\u012a"+
		"\n(\r(\16(\u012b\5(\u012e\n(\3)\3)\3)\3)\6)\u0134\n)\r)\16)\u0135\3*\3"+
		"*\3*\3*\6*\u013c\n*\r*\16*\u013d\3+\3+\3+\3,\3,\3,\3,\5,\u0147\n,\3-\3"+
		"-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u015e\n"+
		"-\3.\6.\u0161\n.\r.\16.\u0162\3.\3.\3/\3/\5/\u0169\n/\3\60\3\60\3\60\3"+
		"\60\7\60\u016f\n\60\f\60\16\60\u0172\13\60\3\60\3\60\3\61\3\61\3\61\3"+
		"\61\7\61\u017a\n\61\f\61\16\61\u017d\13\61\3\61\3\61\3\61\4\u0170\u017b"+
		"\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35"+
		"\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36"+
		";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62\3\2\13\3\2$$\5\2C\\"+
		"aac|\6\2\62;C\\aac|\3\2\62;\5\2\62;CHch\5\2,-//\61\61\5\2\'(``~~\4\2>"+
		">@@\5\2\13\f\17\17\"\"\2\u019e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t"+
		"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2"+
		"\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2"+
		"\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2"+
		"+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2"+
		"\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2"+
		"C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3"+
		"\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2"+
		"\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5e\3\2\2\2\7l\3\2\2\2\t"+
		"v\3\2\2\2\13{\3\2\2\2\r}\3\2\2\2\17\177\3\2\2\2\21\u0082\3\2\2\2\23\u0089"+
		"\3\2\2\2\25\u008e\3\2\2\2\27\u0091\3\2\2\2\31\u0096\3\2\2\2\33\u009c\3"+
		"\2\2\2\35\u00a0\3\2\2\2\37\u00a5\3\2\2\2!\u00a8\3\2\2\2#\u00ab\3\2\2\2"+
		"%\u00b2\3\2\2\2\'\u00b4\3\2\2\2)\u00b6\3\2\2\2+\u00bb\3\2\2\2-\u00be\3"+
		"\2\2\2/\u00c6\3\2\2\2\61\u00ca\3\2\2\2\63\u00cc\3\2\2\2\65\u00d3\3\2\2"+
		"\2\67\u00d5\3\2\2\29\u00dc\3\2\2\2;\u00e4\3\2\2\2=\u00e6\3\2\2\2?\u00e8"+
		"\3\2\2\2A\u00ea\3\2\2\2C\u00ed\3\2\2\2E\u00ef\3\2\2\2G\u00f1\3\2\2\2I"+
		"\u00f3\3\2\2\2K\u00fe\3\2\2\2M\u010d\3\2\2\2O\u012d\3\2\2\2Q\u012f\3\2"+
		"\2\2S\u0137\3\2\2\2U\u013f\3\2\2\2W\u0146\3\2\2\2Y\u015d\3\2\2\2[\u0160"+
		"\3\2\2\2]\u0168\3\2\2\2_\u016a\3\2\2\2a\u0175\3\2\2\2cd\7=\2\2d\4\3\2"+
		"\2\2ef\7r\2\2fg\7w\2\2gh\7d\2\2hi\7n\2\2ij\7k\2\2jk\7e\2\2k\6\3\2\2\2"+
		"lm\7p\2\2mn\7c\2\2no\7o\2\2op\7g\2\2pq\7u\2\2qr\7r\2\2rs\7c\2\2st\7e\2"+
		"\2tu\7g\2\2u\b\3\2\2\2vw\7w\2\2wx\7u\2\2xy\7g\2\2yz\7u\2\2z\n\3\2\2\2"+
		"{|\7*\2\2|\f\3\2\2\2}~\7+\2\2~\16\3\2\2\2\177\u0080\7k\2\2\u0080\u0081"+
		"\7u\2\2\u0081\20\3\2\2\2\u0082\u0083\7k\2\2\u0083\u0084\7p\2\2\u0084\u0085"+
		"\7n\2\2\u0085\u0086\7k\2\2\u0086\u0087\7p\2\2\u0087\u0088\7g\2\2\u0088"+
		"\22\3\2\2\2\u0089\u008a\7h\2\2\u008a\u008b\7w\2\2\u008b\u008c\7p\2\2\u008c"+
		"\u008d\7e\2\2\u008d\24\3\2\2\2\u008e\u008f\7k\2\2\u008f\u0090\7h\2\2\u0090"+
		"\26\3\2\2\2\u0091\u0092\7g\2\2\u0092\u0093\7n\2\2\u0093\u0094\7u\2\2\u0094"+
		"\u0095\7g\2\2\u0095\30\3\2\2\2\u0096\u0097\7y\2\2\u0097\u0098\7j\2\2\u0098"+
		"\u0099\7k\2\2\u0099\u009a\7n\2\2\u009a\u009b\7g\2\2\u009b\32\3\2\2\2\u009c"+
		"\u009d\7h\2\2\u009d\u009e\7q\2\2\u009e\u009f\7t\2\2\u009f\34\3\2\2\2\u00a0"+
		"\u00a1\7h\2\2\u00a1\u00a2\7t\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4\7o\2\2"+
		"\u00a4\36\3\2\2\2\u00a5\u00a6\7v\2\2\u00a6\u00a7\7q\2\2\u00a7 \3\2\2\2"+
		"\u00a8\u00a9\7d\2\2\u00a9\u00aa\7{\2\2\u00aa\"\3\2\2\2\u00ab\u00ac\7u"+
		"\2\2\u00ac\u00ad\7y\2\2\u00ad\u00ae\7k\2\2\u00ae\u00af\7v\2\2\u00af\u00b0"+
		"\7e\2\2\u00b0\u00b1\7j\2\2\u00b1$\3\2\2\2\u00b2\u00b3\7}\2\2\u00b3&\3"+
		"\2\2\2\u00b4\u00b5\7\177\2\2\u00b5(\3\2\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8"+
		"\7c\2\2\u00b8\u00b9\7u\2\2\u00b9\u00ba\7g\2\2\u00ba*\3\2\2\2\u00bb\u00bc"+
		"\7/\2\2\u00bc\u00bd\7@\2\2\u00bd,\3\2\2\2\u00be\u00bf\7f\2\2\u00bf\u00c0"+
		"\7g\2\2\u00c0\u00c1\7h\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3\7w\2\2\u00c3"+
		"\u00c4\7n\2\2\u00c4\u00c5\7v\2\2\u00c5.\3\2\2\2\u00c6\u00c7\7x\2\2\u00c7"+
		"\u00c8\7c\2\2\u00c8\u00c9\7t\2\2\u00c9\60\3\2\2\2\u00ca\u00cb\7?\2\2\u00cb"+
		"\62\3\2\2\2\u00cc\u00cd\7t\2\2\u00cd\u00ce\7g\2\2\u00ce\u00cf\7v\2\2\u00cf"+
		"\u00d0\7w\2\2\u00d0\u00d1\7t\2\2\u00d1\u00d2\7p\2\2\u00d2\64\3\2\2\2\u00d3"+
		"\u00d4\7%\2\2\u00d4\66\3\2\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7\7g\2\2\u00d7"+
		"\u00d8\7h\2\2\u00d8\u00d9\7k\2\2\u00d9\u00da\7p\2\2\u00da\u00db\7g\2\2"+
		"\u00db8\3\2\2\2\u00dc\u00dd\7k\2\2\u00dd\u00de\7p\2\2\u00de\u00df\7e\2"+
		"\2\u00df\u00e0\7n\2\2\u00e0\u00e1\7w\2\2\u00e1\u00e2\7f\2\2\u00e2\u00e3"+
		"\7g\2\2\u00e3:\3\2\2\2\u00e4\u00e5\7.\2\2\u00e5<\3\2\2\2\u00e6\u00e7\7"+
		"]\2\2\u00e7>\3\2\2\2\u00e8\u00e9\7_\2\2\u00e9@\3\2\2\2\u00ea\u00eb\7<"+
		"\2\2\u00eb\u00ec\7<\2\2\u00ecB\3\2\2\2\u00ed\u00ee\7A\2\2\u00eeD\3\2\2"+
		"\2\u00ef\u00f0\7<\2\2\u00f0F\3\2\2\2\u00f1\u00f2\7#\2\2\u00f2H\3\2\2\2"+
		"\u00f3\u00f9\7$\2\2\u00f4\u00f8\n\2\2\2\u00f5\u00f6\7^\2\2\u00f6\u00f8"+
		"\7$\2\2\u00f7\u00f4\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9"+
		"\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f9\3\2"+
		"\2\2\u00fc\u00fd\7$\2\2\u00fdJ\3\2\2\2\u00fe\u0100\7>\2\2\u00ff\u0101"+
		"\t\3\2\2\u0100\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0100\3\2\2\2\u0102"+
		"\u0103\3\2\2\2\u0103\u0107\3\2\2\2\u0104\u0106\t\4\2\2\u0105\u0104\3\2"+
		"\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108"+
		"\u010a\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010b\7@\2\2\u010bL\3\2\2\2\u010c"+
		"\u010e\t\3\2\2\u010d\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u010d\3\2"+
		"\2\2\u010f\u0110\3\2\2\2\u0110\u0114\3\2\2\2\u0111\u0113\t\4\2\2\u0112"+
		"\u0111\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2"+
		"\2\2\u0115N\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0119\7/\2\2\u0118\u0117"+
		"\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u011c\t\5\2\2\u011b"+
		"\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011b\3\2\2\2\u011d\u011e\3\2"+
		"\2\2\u011e\u0125\3\2\2\2\u011f\u0121\7\60\2\2\u0120\u0122\t\5\2\2\u0121"+
		"\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2"+
		"\2\2\u0124\u0126\3\2\2\2\u0125\u011f\3\2\2\2\u0125\u0126\3\2\2\2\u0126"+
		"\u012e\3\2\2\2\u0127\u0129\7\60\2\2\u0128\u012a\t\5\2\2\u0129\u0128\3"+
		"\2\2\2\u012a\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c"+
		"\u012e\3\2\2\2\u012d\u0118\3\2\2\2\u012d\u0127\3\2\2\2\u012eP\3\2\2\2"+
		"\u012f\u0130\7\62\2\2\u0130\u0131\7z\2\2\u0131\u0133\3\2\2\2\u0132\u0134"+
		"\t\6\2\2\u0133\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0133\3\2\2\2\u0135"+
		"\u0136\3\2\2\2\u0136R\3\2\2\2\u0137\u0138\7\62\2\2\u0138\u0139\7d\2\2"+
		"\u0139\u013b\3\2\2\2\u013a\u013c\4\62\63\2\u013b\u013a\3\2\2\2\u013c\u013d"+
		"\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013eT\3\2\2\2\u013f"+
		"\u0140\5Y-\2\u0140\u0141\7?\2\2\u0141V\3\2\2\2\u0142\u0143\7-\2\2\u0143"+
		"\u0147\7-\2\2\u0144\u0145\7/\2\2\u0145\u0147\7/\2\2\u0146\u0142\3\2\2"+
		"\2\u0146\u0144\3\2\2\2\u0147X\3\2\2\2\u0148\u015e\t\7\2\2\u0149\u014a"+
		"\7@\2\2\u014a\u015e\7@\2\2\u014b\u014c\7>\2\2\u014c\u015e\7>\2\2\u014d"+
		"\u015e\t\b\2\2\u014e\u014f\7~\2\2\u014f\u015e\7~\2\2\u0150\u0151\7(\2"+
		"\2\u0151\u015e\7(\2\2\u0152\u015e\t\t\2\2\u0153\u0154\7?\2\2\u0154\u015e"+
		"\7?\2\2\u0155\u0156\7#\2\2\u0156\u015e\7?\2\2\u0157\u0158\7@\2\2\u0158"+
		"\u015e\7?\2\2\u0159\u015a\7>\2\2\u015a\u015e\7?\2\2\u015b\u015c\7\60\2"+
		"\2\u015c\u015e\7\60\2\2\u015d\u0148\3\2\2\2\u015d\u0149\3\2\2\2\u015d"+
		"\u014b\3\2\2\2\u015d\u014d\3\2\2\2\u015d\u014e\3\2\2\2\u015d\u0150\3\2"+
		"\2\2\u015d\u0152\3\2\2\2\u015d\u0153\3\2\2\2\u015d\u0155\3\2\2\2\u015d"+
		"\u0157\3\2\2\2\u015d\u0159\3\2\2\2\u015d\u015b\3\2\2\2\u015eZ\3\2\2\2"+
		"\u015f\u0161\t\n\2\2\u0160\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0160"+
		"\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165\b.\2\2\u0165"+
		"\\\3\2\2\2\u0166\u0169\5_\60\2\u0167\u0169\5a\61\2\u0168\u0166\3\2\2\2"+
		"\u0168\u0167\3\2\2\2\u0169^\3\2\2\2\u016a\u016b\7\61\2\2\u016b\u016c\7"+
		"\61\2\2\u016c\u0170\3\2\2\2\u016d\u016f\13\2\2\2\u016e\u016d\3\2\2\2\u016f"+
		"\u0172\3\2\2\2\u0170\u0171\3\2\2\2\u0170\u016e\3\2\2\2\u0171\u0173\3\2"+
		"\2\2\u0172\u0170\3\2\2\2\u0173\u0174\7\f\2\2\u0174`\3\2\2\2\u0175\u0176"+
		"\7\61\2\2\u0176\u0177\7,\2\2\u0177\u017b\3\2\2\2\u0178\u017a\13\2\2\2"+
		"\u0179\u0178\3\2\2\2\u017a\u017d\3\2\2\2\u017b\u017c\3\2\2\2\u017b\u0179"+
		"\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u017b\3\2\2\2\u017e\u017f\7,\2\2\u017f"+
		"\u0180\7\61\2\2\u0180b\3\2\2\2\34\2\u00f7\u00f9\u0100\u0102\u0105\u0107"+
		"\u010d\u010f\u0112\u0114\u0118\u011d\u0123\u0125\u012b\u012d\u0133\u0135"+
		"\u013d\u0146\u015d\u0162\u0168\u0170\u017b\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}